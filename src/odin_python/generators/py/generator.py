from pydantic import BaseModel

from odin_python.data_types.type_registry import CustomDataType, BuiltinDataType, DataType

from .conversion import generate_class, generate_basemodel_type, generate_standard_type
from ..abstract_generator import AbstractGenerator, ModelContext
import pathlib
import shutil

TEMPLATE_PROJECT_DIR = (pathlib.Path(__file__).parent / "template").resolve()
# print(f"TEMPLATE_PROJECT_DIR: {TEMPLATE_PROJECT_DIR}")


class PYGenerator(AbstractGenerator):
    class Config(BaseModel):
        pass

    config: BaseModel

    def __init__(self, config: BaseModel):
        super().__init__(config)
        self.config = config

    def generate(self, model_context: ModelContext, output_path: str) -> None:  # type: ignore
        # copy the template project to the output path

        shutil.copytree(
            TEMPLATE_PROJECT_DIR,
            output_path,
            dirs_exist_ok=True,
            ignore=shutil.ignore_patterns("*.pyc", "__pycache__", ".venv"),
        )

        with open(pathlib.Path(output_path) / "src" / "odin_interface" / "type_definitions.py", "w") as f:
            f.write("# This file is generated by the odin_python generator\n")
            f.write("# Do not edit this file\n")
            f.write("# Generated by odin_python\n\n")
            f.write("from .base_types import GenericModel,ConfiguredBaseModel\n")
            f.write("import struct\n")
            f.write("\n")

            # Generate the type class
            for type_name, datatype in model_context.types:
                if isinstance(datatype, CustomDataType):
                    if isinstance(datatype.model.root, DataType):
                        f.write(generate_rootmodel_type(type_name, datatype))
                    else:
                        f.write(generate_basemodel_type(type_name, datatype))
                elif isinstance(datatype, BuiltinDataType):
                    f.write(generate_standard_type(type_name, datatype))

        with open(pathlib.Path(output_path) / "src" / "odin_interface" / "model.py", "w") as f:
            f.write("# This file is generated by the odin_python generator\n")
            f.write("# Do not edit this file\n")
            f.write("# Generated by odin_python\n\n")
            f.write(
                "from .base_types import ODINEntry,ODINArrayEntry,ODINVectorEntry,ODINStringEntry,ODINBytesEntry,BaseRootModel,TemplateInterface,ConfiguredBaseModel\n"
            )
            f.write("import struct\n")
            f.write("\n")

            # Import all the types
            types = [type_class.py_typename for type_name, type_class in model_context.types]

            f.write(f"from .type_definitions import {', '.join(types)}\n\n")

            # Generate the model classes
            f.write(generate_class("RootModel", model_context.root_model, 0, "RootModel"))
